#include <iostream> //Konzolra kiiras, beolvasashoz konyvtar.
#include <vector> //Konyvtar meghivasa a vector adat tarolohoz.
#include <string> //Ures konyvtar Microsoft Visual Studio-hoz.
using namespace std; //Konyvtar hogy ne std:: cout, cin ele.

class Termek { //Termek osztaly.
    
private: //Sz√°munkra lathato valtozok.
    int cikkszam; //Szam.
    string nev; //Szoveg.
    int ar; //Szam.
    int suly; //Szam

public: //Nyilvanos valtozok.
    Termek(){} //Ures konstruktor ,hogy letezzen ha nincs is benne adat.

    Termek(int _cikkszam, string _nev, int _ar, int _suly){ //
        cikkszam = _cikkszam;
        nev = _nev;
        ar = _ar;
        suly = _suly;
    }

    int getCikkszam() const{ //Kivulrol be informacio.
        return cikkszam;
    }

    string getNev() const{
        return nev;
    }

    int getAr() const{
        return ar;
    }

    int getSuly() const{
        return suly;
    }
};

class Webshop { //Osztaly.
    
private: //Szamunkra lathato valtozok s vektorok a valtozok tarolasara.
    vector<Termek> raktaron;
    vector<Termek> eladott;
    string nev;
    string cim;

    int bevetel = 0; //Valtozo mennyisegek megadott, alap mennyisege mivel meg nincs benn semmi.
    int eladottdb = 0;

public: //Nyilvanos valtozok.
    Webshop(){} //Ures konstruktor ,hogy letezzen ha nincs is benne adat.         
                  
    Webshop(string _nev, string _cim){
        nev = _nev;
        cim = _cim;
    }

    string getNev() const{
        return nev;
    }

    string getCim() const{
        return cim;
    }

    int getEladottdb() const{
        return eladottdb;
    }

    int getBevetel() const{
        return bevetel;
    }

    int getTermekraktaron(Termek termek){ //Parameterlistan megadva a termek oszaly termeke.
        for(int i = 0; i < raktaron.size(); i++){ //Vegig 0tol termek osztaly mereteig.
            if(raktaron[i].getCikkszam() == termek.getCikkszam()){ //Ha getter alapjan van olyan termek raktaron akkor visszater azzal.
                return i;
            }
        }
        return 0;
    }

    void hozzaRaktaron(Termek termek){ //Raktar vegere uj termek beadaskor.
        raktaron.push_back(termek);
    }

    void elveszRaktaron(Termek termek){ //Ha raktarbol ki x mennyisegu termek akkor azt torli az elejerol.
        raktaron.erase(raktaron.begin()+getTermekraktaron(termek));
    }

    bool vanRaktaron(Termek termek){ //Vegig 0tol raktar meretig s ha van raktaron cikkszam alapjan termek.
        for(int i = 0; i < raktaron.size(); i++){
            if(raktaron[i].getCikkszam() == termek.getCikkszam()){
                return true; //Visszater.
            }
        }
        return false; //Nem ter vissza.

    void hozzaEladott(Termek termek){ //Eladaskor hozza az a termek a vegere.
        eladott.push_back(termek);
    }

    bool elveszEladott(Termek termek){ //Eladasnal 0tol eladas meretig s ha van olyan eladott termek visszater vagy nem.
        for(int i = 0; i < eladott.size(); i++){
            if(eladott[i].getCikkszam() == termek.getCikkszam()){
                return true;
            }
        }
        return false;
    }

    void eladva(Termek termek){ //Elozo fuggvenyek hivasa s termek ertek kezelese.
        elveszRaktaron(termek);
        hozzaEladott(termek);
        bevetel+=termek.getAr(); //Eladassal bevetel hozza adasa termek ar gettere alapjan.
        eladottdb++; //Eladottak mindig eggyesevel novelve.
    }

    Termek getLegdragabbeladott(){ 
        Termek ideiglenes; //Ideiglenes valtozo majd vegig 0tol eladott meretig.
        for(int i = 0; i < eladott.size(); i++){ //Ha a legnagyobb az ideiglenes valtozo ara eladottak kozt akkor az ideiglenes valik.
            if(!elveszEladott(ideiglenes) || eladott[i].getAr() > ideiglenes.getAr()){ //A legdragabba.
                ideiglenes = eladott[i];
            }
        }
        return ideiglenes; //Ha nem visszater onmagaval.
    }

    Termek getLegolcsobbeladott(){
        Termek ideiglenes;//Ideiglenes valtozo majd vegig 0tol eladott meretig.
        for(int i = 0; i < eladott.size(); i++){//Ha legkissebb az ideiglenes valtozo ara eladottak kozt akkor az ideiglenes valik.
            if(!elveszEladott(ideiglenes) || eladott[i].getAr() < ideiglenes.getAr()){
                ideiglenes = eladott[i]; //A legolcsobba.
            }
        }
        return ideiglenes; //Ha nem visszater onmagaval.
    }

    void termekTulajdonsag(Termek termek){ //Konzolra ki iratasok.
        cout << "\t Cikkszam \t Nev \t Ar \t Suly" << endl;
        cout << "\t\t" << termek.getCikkszam() << "\t" << termek.getNev() << "\t" << termek.getAr() << "Ft\t" << termek.getSuly() << "kg" << endl;
    }

    void termekRaktaron(){
        cout << "Raktaron termek:" << endl;
        cout << "\t Cikkszam \t Nev \t Ar \t Suly" << endl;
        for(int i = 0; i < raktaron.size(); i++){
            cout << (i+1) << ".\t\t" << raktaron[i].getCikkszam() << "\t" << raktaron[i].getNev() << "\t" << raktaron[i].getAr() << "Ft\t" << raktaron[i].getSuly() << "kg" << endl;
        }
    }

    void termekEladott(){
        cout << "Eladott termek:" << endl;
        cout << "\t Cikkszam \t Nev \t Ar \t Suly" << endl;
        for(int i = 0; i < eladott.size(); i++){
            cout << (i+1) << ".\t\t" << eladott[i].getCikkszam() << "\t" << eladott[i].getNev() << "\t" << eladott[i].getAr() << "Ft\t" << eladott[i].getSuly() << "kg" << endl;
        }
    }
};

void elvalaszto(){
    cout << "-----------------------------------------------------------------------------------------------------" << endl;
}

int main(){ //Meghivjuk a kesz fuggvenyeket a mainben.

    Webshop w("Ebay", "V.hol"); //Megadjuk az osztaly ertekeit parameterlistajaba.
    
    Termek t(01, "Alma", 25, 2); //Megadjuk az osztaly valtozoinak ertekeit.
    
    Termek t0(03, "Banan", 15, 4);
    
    Termek t1(04, "Citrom", 30, 1);
    
    Termek t2(06, "Datolya", 220, 3);
    

    w.hozzaRaktaron(t); //Ki iratas szerkesztese.
    
    w.hozzaRaktaron(t0);
    
    w.hozzaRaktaron(t1);
    
    w.hozzaRaktaron(t2);
    

    w.termekRaktaron();
    elvalaszto();
    
    w.termekEladott();
    elvalaszto();
    

    w.eladva(t0);
    w.termekRaktaron();
    elvalaszto();
    
    w.termekEladott();
    elvalaszto();
    
    cout << "Eladott termek szam: " << w.getEladottdb() << endl;
    
    cout << "Bevetel: " << w.getBevetel() << "Ft" << endl;
    elvalaszto();

    w.eladva(t2);
    w.termekRaktaron();
    elvalaszto();
    
    w.termekEladott();
    elvalaszto();
    
    cout << "Eladott termek szam: " << w.getEladottdb() << endl;
    cout << "Bevetel: " << w.getBevetel() << "Ft" << endl;
    elvalaszto();

    cout << "Legolcsobb eladott:" << endl;
    w.termekTulajdonsag(w.getLegolcsobbeladott());
    elvalaszto();
    
    cout << "Legdragabb eladott:" << endl;
    w.termekTulajdonsag(w.getLegdragabbeladott());
   
    return 0;
}
